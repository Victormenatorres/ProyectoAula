package vista;

import controlador.Ctrl_Categoria;
import controlador.Ctrl_Producto;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import modelo.Categoria;
import modelo.Producto;


/**
 *
 * @author LENOVO
 */
public class InterGestionarProducto extends javax.swing.JInternalFrame {
    

     private int idProducto;
    int obtenerIdCategoriaCombo = 0;


    public InterGestionarProducto() {
         initComponents();
    inicializarTabla();  // Añade esta línea
    cargarTablaProductos();
        initComponents();
        this.setSize(new Dimension(900, 500));
        this.setTitle("Gestionar Productos");

        this.CargarTablaProductos();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txt_nombre = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txt_cantidad = new javax.swing.JTextField();
        txt_precio = new javax.swing.JTextField();
        txt_descripcion = new javax.swing.JTextField();
        jComboBox_iva = new javax.swing.JComboBox<>();
        jComboBox_categoria = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        jButton_actualizar = new javax.swing.JButton();
        jButton_eliminar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_productos = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Administrar Productos");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, -20, -1, -1));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Nombre:");
        jPanel4.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 90, -1));

        txt_nombre.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txt_nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nombreActionPerformed(evt);
            }
        });
        jPanel4.add(txt_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, 170, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Cantidad:");
        jPanel4.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 90, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Precio:");
        jPanel4.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, 90, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Descripcion:");
        jPanel4.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 40, 90, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("IVA:");
        jPanel4.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 10, 90, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Categoria:");
        jPanel4.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 40, 90, -1));

        txt_cantidad.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txt_cantidad.setEnabled(false);
        jPanel4.add(txt_cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 170, -1));

        txt_precio.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel4.add(txt_precio, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 170, -1));

        txt_descripcion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel4.add(txt_descripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 40, 170, -1));

        jComboBox_iva.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox_iva.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione iva:", "No grava iva", "12%", "14%" }));
        jPanel4.add(jComboBox_iva, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 10, 150, -1));

        jComboBox_categoria.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox_categoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione categoria:", "Item 2", "Item 3", "Item 4" }));
        jPanel4.add(jComboBox_categoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 40, 150, -1));

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 870, 100));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton_actualizar.setBackground(new java.awt.Color(51, 204, 0));
        jButton_actualizar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_actualizar.setText("Actualizar");
        jButton_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_actualizarActionPerformed(evt);
            }
        });
        jPanel5.add(jButton_actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jButton_eliminar.setBackground(new java.awt.Color(255, 51, 51));
        jButton_eliminar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_eliminar.setText("Eliminar");
        jButton_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_eliminarActionPerformed(evt);
            }
        });
        jPanel5.add(jButton_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 90, -1));

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 50, 130, 270));

        jTable_productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_productos);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 710, 250));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Administrar Productos");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_actualizarActionPerformed

       Producto producto = new Producto();
Ctrl_Producto controlProducto = new Ctrl_Producto();
String iva = jComboBox_iva.getSelectedItem().toString().trim();
String categoria = jComboBox_categoria.getSelectedItem().toString().trim();

// Validar campos
if (txt_nombre.getText().isEmpty() || txt_cantidad.getText().isEmpty() || txt_precio.getText().isEmpty()) {
    JOptionPane.showMessageDialog(null, "Complete todos los campos");
} else if (iva.equalsIgnoreCase("Seleccione iva:")) {
    JOptionPane.showMessageDialog(null, "Seleccione IVA.");
} else if (categoria.equalsIgnoreCase("Seleccione categoria:")) {
    JOptionPane.showMessageDialog(null, "Seleccione categoría");
} else {
    try {
        // Obtener valores del formulario
        producto.setIdProducto(idProducto);  // Asegúrate de tener este valor definido antes
        producto.setNombre(txt_nombre.getText().trim());
        producto.setCantidad(Integer.parseInt(txt_cantidad.getText().trim()));

        // Manejar precio con coma o punto
        String precioTXT = txt_precio.getText().trim().replace(",", ".");
        double precio = Double.parseDouble(precioTXT);
        producto.setPrecio(precio);

        producto.setDescripcion(txt_descripcion.getText().trim());

        // Asignar IVA
        switch (iva) {
            case "No grava iva":
                producto.setPorcentajeIva(0);
                break;
            case "12%":
                producto.setPorcentajeIva(12);
                break;
            case "14%":
                producto.setPorcentajeIva(14);
                break;
        }

        // Obtener ID de la categoría desde el combo (asegúrate de que obtenerIdCategoriaCombo se actualice correctamente)
        this.IdCategoria();  // Este método debería actualizar obtenerIdCategoriaCombo
        producto.setIdCategoria(obtenerIdCategoriaCombo);
        producto.setEstado(1);  // Activo

        // Actualizar producto
        if (controlProducto.actualizar(producto, idProducto)) {
            JOptionPane.showMessageDialog(null, "Registro actualizado correctamente");
            this.CargarComboCategoria();
            this.CargarTablaProductos();
            this.jComboBox_iva.setSelectedItem("Seleccione iva:");
            this.Limpiar();
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró el producto para actualizar");
        }
    } catch (HeadlessException | NumberFormatException e) {
        System.out.println("Error al actualizar producto: " + e);
    }
}

    }//GEN-LAST:event_jButton_actualizarActionPerformed

    private void jButton_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_eliminarActionPerformed
        Ctrl_Producto controlProducto = new Ctrl_Producto();
        if (idProducto == 0) {
            JOptionPane.showMessageDialog(null, "¡Seleccione un Producto!");
        } else {
            if (!controlProducto.eliminar(idProducto)) {
                JOptionPane.showMessageDialog(null, "¡Producto Eliminado!");
                this.CargarTablaProductos();
                this.CargarComboCategoria();
                this.Limpiar();
            } else {
                JOptionPane.showMessageDialog(null, "¡Error al eliminar producto!");
            }
        }
    }//GEN-LAST:event_jButton_eliminarActionPerformed

    private void txt_nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nombreActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_actualizar;
    private javax.swing.JButton jButton_eliminar;
    private javax.swing.JComboBox<String> jComboBox_categoria;
    private javax.swing.JComboBox<String> jComboBox_iva;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_productos;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_descripcion;
    private javax.swing.JTextField txt_nombre;
    private javax.swing.JTextField txt_precio;
    // End of variables declaration//GEN-END:variables


    /**
 * Método que envía datos seleccionados a los campos del formulario
 */
private void EnviarDatosProductoSeleccionado(int idProducto) {
    Ctrl_Producto ctrlProducto = new Ctrl_Producto();
    Producto producto = ctrlProducto.obtenerProductoPorId(idProducto);
    
    if (producto != null) {
        txt_nombre.setText(producto.getNombre());
        txt_cantidad.setText(String.valueOf(producto.getCantidad()));
        txt_precio.setText(String.valueOf(producto.getPrecio()));
        txt_descripcion.setText(producto.getDescripcion());
        
        // Seleccionar IVA en el combo
        switch (producto.getPorcentajeIva()) {
            case 0:
                jComboBox_iva.setSelectedItem("No grava iva");
                break;
            case 12:
                jComboBox_iva.setSelectedItem("12%");
                break;
            case 14:
                jComboBox_iva.setSelectedItem("14%");
                break;
            default:
                jComboBox_iva.setSelectedItem("Seleccione iva:");
                break;
        }
        
        // Seleccionar categoría en el combo
        String nombreCategoria = relacionarCategoria(producto.getIdCategoria());
        for (int i = 0; i < jComboBox_categoria.getItemCount(); i++) {
            if (jComboBox_categoria.getItemAt(i).equals(nombreCategoria)) {
                jComboBox_categoria.setSelectedIndex(i);
                break;
            }
        }
    }
}
    /**
 * Método para obtener el ID de la categoría seleccionada
 */

/**
 * Método para obtener el nombre de la categoría relacionada
 */
private String relacionarCategoria(int idCategoria) {
    if(idCategoria == 0) return "Sin categoría";
    
    for(Categoria cat :Ctrl_Categoria.listaCategorias) {
        if(cat.getIdCategoria() == idCategoria) {
            return cat.getDescripcion();
        }
    }
    
    return "Sin categoría";
}
private void CargarComboCategoria() {
    jComboBox_categoria.removeAllItems();
    jComboBox_categoria.addItem("Seleccione categoría");
    
    // Asegúrate de cargar solo categorías activas
    for(Categoria cat : Ctrl_Categoria.listaCategorias) {
        if(cat.getEstado() == 1) { // 1 = activa
            jComboBox_categoria.addItem(cat.getDescripcion());
        }
    }
}
private void CargarTablaProductos() {
    // Obtener controladores
    Ctrl_Producto ctrlProducto = new Ctrl_Producto();
    Ctrl_Categoria ctrlCategoria = new Ctrl_Categoria();
    
    // Configurar modelo de tabla
    DefaultTableModel model = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // Hacer que la tabla no sea editable
        }
    };
    
    jTable_productos.setModel(model);
    
    // Añadir columnas
    model.addColumn("N°"); // ID
    model.addColumn("Nombre");
    model.addColumn("Cantidad");
    model.addColumn("Precio");
    model.addColumn("Descripción");
    model.addColumn("IVA");
    model.addColumn("Categoría");
    model.addColumn("Estado");

    // Obtener listas necesarias una sola vez
    List<Producto> productos = ctrlProducto.obtenerProductosActivos();
    List<Categoria> categorias = ctrlCategoria.obtenerCategorias();
    
    // Mapa para búsqueda rápida de categorías
    Map<Integer, String> mapaCategorias = new HashMap<>();
    for (Categoria cat : categorias) {
        mapaCategorias.put(cat.getIdCategoria(), cat.getDescripcion());
    }

    // Llenar tabla con productos
    for (Producto producto : productos) {
        // Obtener nombre de categoría (más eficiente con el mapa)
        String nombreCategoria = mapaCategorias.getOrDefault(producto.getIdCategoria(), "Sin categoría");
        
        // Formatear IVA
        String ivaFormateado = String.format("%d%%", producto.getPorcentajeIva());
        
        // Crear fila
        Object[] fila = {
            producto.getIdProducto(),
            producto.getNombre(),
            producto.getCantidad(),
            String.format("%.2f", producto.getPrecio()), // Formato para 2 decimales
            producto.getDescripcion(),
            ivaFormateado,
            nombreCategoria,
            producto.getEstado() == 1 ? "Activo" : "Inactivo"
        };
        
        model.addRow(fila);
    }

    // Ajustar anchos de columnas
    jTable_productos.getColumnModel().getColumn(0).setPreferredWidth(40);  // N°
    jTable_productos.getColumnModel().getColumn(1).setPreferredWidth(150); // Nombre
    jTable_productos.getColumnModel().getColumn(2).setPreferredWidth(60);  // Cantidad
    jTable_productos.getColumnModel().getColumn(3).setPreferredWidth(70);  // Precio
    jTable_productos.getColumnModel().getColumn(4).setPreferredWidth(200); // Descripción
    jTable_productos.getColumnModel().getColumn(5).setPreferredWidth(50);  // IVA
    jTable_productos.getColumnModel().getColumn(6).setPreferredWidth(120); // Categoría
    jTable_productos.getColumnModel().getColumn(7).setPreferredWidth(70);  // Estado

    // Configurar evento de selección
    jTable_productos.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e) {
            int filaSeleccionada = jTable_productos.rowAtPoint(e.getPoint());
            if (filaSeleccionada >= 0) {
                idProducto = (int) model.getValueAt(filaSeleccionada, 0);
                EnviarDatosProductoSeleccionado(idProducto);
            }
        }
    });
}
 private void Limpiar() {
        txt_nombre.setText("");
        txt_cantidad.setText("");
        txt_precio.setText("");
        txt_descripcion.setText("");
        jComboBox_iva.setSelectedItem("Seleccione iva:");
        jComboBox_categoria.setSelectedItem("Seleccione categoria:");
    }
 private double calcularIva(double precio, int porcentajeIva) {
    switch (porcentajeIva) {
        case 12: return precio * 0.12;
        case 14: return precio * 0.14;
        default: return 0.0;
    }
}
 
private void cargarTablaProductos() {
   DefaultTableModel model = (DefaultTableModel) jTable_productos.getModel();
    model.setRowCount(0);

    Ctrl_Producto ctrlProducto = new Ctrl_Producto();
    Ctrl_Categoria ctrlCategoria = new Ctrl_Categoria();

    for (Producto p : ctrlProducto.obtenerProductosActivos()) {
        String nombreCategoria = ctrlCategoria.obtenerNombreCategoriaPorId(p.getIdCategoria());
        
        model.addRow(new Object[]{
            p.getIdProducto(),
            p.getNombre(),
            p.getCantidad(),
            p.getPrecio(),
            p.getDescripcion(),
            calcularIva(p.getPrecio(), p.getPorcentajeIva()),
            nombreCategoria,
            p.getEstado() == 1 ? "Activo" : "Inactivo"
        });
    }
    jTable_productos.revalidate();
}
private void inicializarTabla() {
    DefaultTableModel model = new DefaultTableModel(
        new Object[][]{}, 
        new String[]{"N°", "Nombre", "Cantidad", "Precio", "Descripción", "IVA", "Categoría", "Estado"}
    ) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // Hacer que la tabla no sea editable
        }
    };
    
    jTable_productos.setModel(model);
    
    // Opcional: Ajustar ancho de columnas
    jTable_productos.getColumnModel().getColumn(0).setPreferredWidth(30); // N°
    jTable_productos.getColumnModel().getColumn(1).setPreferredWidth(150); // Nombre
}
private int IdCategoria() {
    String categoriaSeleccionada = jComboBox_categoria.getSelectedItem().toString();
    
    // Verifica si se seleccionó una categoría válida
    if(categoriaSeleccionada.equals("Seleccione categoría")) {
        return 0; // 0 indicará "Sin categoría"
    }
    
    // Busca la categoría en la lista
    for(Categoria cat : Ctrl_Categoria.listaCategorias) {
        if(cat.getDescripcion().equals(categoriaSeleccionada)) {
            return cat.getIdCategoria();
        }
    }
    
    return 0; // Si no se encuentra, retorna 0
}



}
