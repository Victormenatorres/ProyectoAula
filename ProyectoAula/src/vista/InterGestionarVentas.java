package vista;


import controlador.Ctrl_Cliente;
import controlador.Ctrl_RegistrarVenta;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import modelo.CabeceraVenta;
import modelo.Cliente;

/**
 *
 * @author ediso
 */
public class InterGestionarVentas extends javax.swing.JInternalFrame {

    private int idCliente = 0;
    private int idVenta;

    public InterGestionarVentas() {
        initComponents();
        this.setSize(new Dimension(900, 500));
        this.setTitle("Gestionar Ventas");
        //Cargar tabla
        this.CargarComboClientes();
        this.CargarTablaVentas();

        //insertar imagen en nuestro JLabel
        ImageIcon wallpaper = new ImageIcon("src/img/fondo3.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(900, 500, WIDTH));
        jLabel_wallpaper.setIcon(icono);
        this.repaint();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_ventas = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButton_actualizar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txt_total_pagar = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txt_fecha = new javax.swing.JTextField();
        jComboBox_cliente = new javax.swing.JComboBox<>();
        jComboBox_estado = new javax.swing.JComboBox<>();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Administrar Ventas");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_ventas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_ventas);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 710, 250));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 730, 270));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton_actualizar.setBackground(new java.awt.Color(51, 204, 0));
        jButton_actualizar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_actualizar.setText("Actualizar");
        jButton_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_actualizarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 50, 130, 270));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Total Pagar:");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 90, -1));

        txt_total_pagar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txt_total_pagar.setEnabled(false);
        jPanel3.add(txt_total_pagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, 170, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Fecha:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 90, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Cliente:");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, 90, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Estado:");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 40, 90, -1));

        txt_fecha.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txt_fecha.setEnabled(false);
        jPanel3.add(txt_fecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 170, -1));

        jComboBox_cliente.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox_cliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione cliente:", "Item 2", "Item 3", "Item 4" }));
        jPanel3.add(jComboBox_cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 10, 170, -1));

        jComboBox_estado.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox_estado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Activo", "Inactivo" }));
        jPanel3.add(jComboBox_estado, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 40, 170, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 870, 100));
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 890, 470));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_actualizarActionPerformed
  CabeceraVenta cabeceraVenta = new CabeceraVenta();
    Ctrl_RegistrarVenta controlRegistrarVenta = new Ctrl_RegistrarVenta();
    String cliente, estado;
    cliente = jComboBox_cliente.getSelectedItem().toString().trim();
    estado = jComboBox_estado.getSelectedItem().toString().trim();

    int idCliente = -1;

    // Obtener el id del cliente desde la lista
    for (Cliente c : Ctrl_Cliente.obtenerTodosClientes()) {
        String nombreCompleto = c.getNombre().trim() + " " + c.getApellido().trim();
        if (nombreCompleto.equalsIgnoreCase(cliente)) {
            idCliente = c.getIdCliente();
            break;
        }
    }

    // Validar cliente seleccionado
    if (!cliente.equalsIgnoreCase("Seleccione cliente:") && idCliente != -1) {
        cabeceraVenta.setIdCliente(idCliente);
        if (estado.equalsIgnoreCase("Activo")) {
            cabeceraVenta.setEstado(1);
        } else {
            cabeceraVenta.setEstado(0);
        }

        // Obtener venta original para conservar datos
        CabeceraVenta ventaOriginal = controlRegistrarVenta.obtenerCabeceraPorId(idVenta);
        if (ventaOriginal != null) {
            // Mantener los demás datos
            cabeceraVenta.setIdCabeceraVenta(idVenta);
            cabeceraVenta.setFechaVenta(ventaOriginal.getFechaVenta());
            cabeceraVenta.setValorPagar(ventaOriginal.getValorPagar());

            if (controlRegistrarVenta.actualizar(cabeceraVenta, idVenta)) {
                JOptionPane.showMessageDialog(null, "¡Registro Actualizado!");
                this.CargarTablaVentas();
                this.Limpiar();
            } else {
                JOptionPane.showMessageDialog(null, "Error al Actualizar");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Venta no encontrada");
        }
    } else {
        JOptionPane.showMessageDialog(null, "Seleccione un cliente válido");
    }
    }//GEN-LAST:event_jButton_actualizarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_actualizar;
    private javax.swing.JComboBox<String> jComboBox_cliente;
    private javax.swing.JComboBox<String> jComboBox_estado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_ventas;
    private javax.swing.JTextField txt_fecha;
    private javax.swing.JTextField txt_total_pagar;
    // End of variables declaration//GEN-END:variables

    /*
     * *****************************************************
     * metodo para limpiar
     * *****************************************************
     */
    private void Limpiar() {
        this.txt_total_pagar.setText("");
        this.txt_fecha.setText("");
        this.jComboBox_cliente.setSelectedItem("Seleccione cliente:");
        this.jComboBox_estado.setSelectedItem("Activo");
        idCliente = 0;
    }


    /*
     * *****************************************************
     * metodo para mostrar todos los clientes registrados
     * *****************************************************
     */
  
private void CargarTablaVentas() {
    DefaultTableModel model = new DefaultTableModel();
    InterGestionarVentas.jTable_ventas = new JTable(model);
    InterGestionarVentas.jScrollPane1.setViewportView(InterGestionarVentas.jTable_ventas);

    model.addColumn("N°");
    model.addColumn("Cliente");
    model.addColumn("Total a Pagar");
    model.addColumn("Fecha Venta");
    model.addColumn("Estado");

    List<CabeceraVenta> listaVentas = Ctrl_RegistrarVenta.obtenerTodasCabeceras();
    List<Cliente> listaClientes = Ctrl_Cliente.obtenerTodosClientes();

    for (CabeceraVenta venta : listaVentas) {
        Object fila[] = new Object[5];
        fila[0] = venta.getIdCabeceraVenta();

        // Buscar nombre del cliente
        String nombreCliente = "Desconocido";
        for (Cliente c : listaClientes) {
            if (c.getIdCliente()== venta.getIdCliente()) {
                nombreCliente = c.getNombre() + " " + c.getApellido();
                break;
            }
        }

        fila[1] = nombreCliente;
        fila[2] = venta.getValorPagar();
        fila[3] = venta.getFechaVenta();
        fila[4] = venta.getEstado() == 1 ? "Activo" : "Inactivo";

        model.addRow(fila);
    }

    // Evento de selección
    jTable_ventas.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e) {
            int fila_point = jTable_ventas.rowAtPoint(e.getPoint());
            int columna_point = 0;
            if (fila_point > -1) {
                idVenta = (int) model.getValueAt(fila_point, columna_point);
                EnviarDatosVentaSeleccionada(idVenta);
            }
        }
    });
}


    /*
     * **************************************************
     * Metodo que envia datos seleccionados
     * **************************************************
     */
 private void EnviarDatosVentaSeleccionada(int idVenta) {
    try {
        CabeceraVenta ventaSeleccionada = null;
        for (CabeceraVenta venta : Ctrl_RegistrarVenta.obtenerTodasCabeceras()) {
            if (venta.getIdCabeceraVenta() == idVenta) {
                ventaSeleccionada = venta;
                break;
            }
        }

        if (ventaSeleccionada != null) {
            Cliente clienteSeleccionado = null;
            for (Cliente c : Ctrl_Cliente.obtenerTodosClientes()) {
                if (c.getIdCliente() == ventaSeleccionada.getIdCliente()) {
                    clienteSeleccionado = c;
                    break;
                }
            }

            if (clienteSeleccionado != null) {
                jComboBox_cliente.setSelectedItem(clienteSeleccionado.getNombre() + " " + clienteSeleccionado.getApellido());
            } else {
                jComboBox_cliente.setSelectedItem("Desconocido");
            }

            txt_total_pagar.setText(String.valueOf(ventaSeleccionada.getValorPagar()));
            txt_fecha.setText(ventaSeleccionada.getFechaVenta());

            if (ventaSeleccionada.getEstado() == 1) {
                jComboBox_estado.setSelectedItem("Activo");
            } else {
                jComboBox_estado.setSelectedItem("Inactivo");
            }
        } else {
            System.out.println("No se encontró la venta con ID: " + idVenta);
        }
    } catch (Exception e) {
        System.out.println("Error al seleccionar venta: " + e);
    }
}


    /*
    Metodo para cargar los clientes en el jComboBox
     */
private void CargarComboClientes() {
    try {
        jComboBox_cliente.removeAllItems();
        jComboBox_cliente.addItem("Seleccione cliente:");
        
        for (Cliente cliente : Ctrl_Cliente.obtenerTodosClientes()) {
            jComboBox_cliente.addItem(cliente.getNombre() + " " + cliente.getApellido());
        }
    } catch (Exception e) {
        System.out.println("¡Error al cargar clientes desde la lista! " + e);
    }
}


}
